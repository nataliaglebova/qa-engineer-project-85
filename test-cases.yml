---
- summary: |
    Проверка запуска игры без регистрации
  requirement: |
    Пользователь должен иметь возможность начать игру без регистрации и авторизации
  prerequisites: |
    Пользьзователь не авторизован
  test-data: |
    Отсутствуют
  steps:
    - Нажимаем на кнопку запуска игры на стартовой странице
  expected-result: |
    Пользователь переходит на страницу соревнования без дополнительных дейтсвий

- summary: |
    Проверка входа пользователя с существующими логином (email) и паролем
  requirement: |
    При верном вводе логине (email) и пароля пользователь должен войти в личный кабинет игрока
  prerequisites: |
    - Пользователь с тестируемыми данными должен быть в базе пользователей
    - Открыта страница входа
  test-data: |
    Email = 12345678@gmail.com Password = 123456789
  steps:
    - Вводим логин
    - Вводим пароль
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь должен попасть в личный кабинет игрока

- summary: |
    Проверка входа пользователя с несуществующими логином (email) и паролем
  requirement: |
    При неправильном логине (email) или пароле пользователь должен получить сообщение об ошибке
  prerequisites:
    Открыта страница входа
  test-data: |
    Email = nata7@gmail.com Password = password
  steps:
    - Вводим Email
    - Вводим Password
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь должен получить сообщение об ошибке

- summary: |
    Проверка входа пользователя с неправильным паролем
  requirement: |
    При неправильном пароле пользователь должен получить сообщение об ошибке
  prerequisites:
    Открыта страница входа
  test-data: |
    Email = 12345678@gmail.com Password = password
  steps:
    - Вводим Email
    - Вводим Password
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь должен получить сообщение об ошибке в пароле

- summary: |
    Проверка входа пользователя с аккаутном GitHub
  requirement: |
    При выборе авторизации через GitHub пользователь должен войти в личный кабинет
  prerequisites:
    Открыта страница входа
    Имеется авторизованный аккаунт GitHub
  test-data: |
    Email = 12345678@gmail.com Password = password
  steps:
    - Нажимаем "Sing in with GitHub"
    - Вводим логин и пароль на странице
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь должен попасть в личный кабинет игрока

- summary: |
    Проверка входа пользователя с аккаутном Discord
  requirement: |
    При выборе авторизации через Discord пользователь должен войти в личный кабинет
  prerequisites:
    Открыта страница входа
    Имеется авторизованный аккаунт Discord
  test-data: |
    Email = 12345678@gmail.com Password = password
  steps:
    - Нажимаем "Sing in with Discord"
    - Вводим логин и пароль на странице
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь должен попасть в личный кабинет игрока

- summary: |
    Проверка выбора языка программирования для соревнования
  requirement: |
    Пользователь должен иметь возможность выбрать язык, на котором будет проходить соревнование
  prerequisites:
    Пользователь авторизован и открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на иконку пользователя
    - переходим в настройки ("Settings")
    - выбираем язык соревнования (Your weapon)
    - создаём игру
  expected-result: |
    Соревнование предусматривает решение на выбранном языке программирования

- summary: |
    Проверка настройки игры при создании
  requirement: |
    В Личном кабинете пользователь должен иметь возможность создать игру по настраиваемым параметрам (выбрать уровень сложности, время игры, соперник, тематику задания)
  prerequisites:
    Пользователь авторизован и открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем любой тип соперника
    - выбираем продолжительность времени
    - выбираем тип задания
    - нажимаем кнопку создания игры
  expected-result: |
    Соревнование создано по заданным параметрам

- summary: |
    Проверка подключения к уже созданным играм
  requirement: |
    В Личном кабинете пользователь должен иметь возможность присоединиться к уже созданным играм/турнирам
  prerequisites:
    Пользователь авторизован и открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на кнопку подключения к существующей игре в режиме ожидания соперника
  expected-result: |
    Соревнование начинается при присоединении к нему пользователя

- summary: |
    Проверка выбора конкретного соперника при создании игры
  requirement: |
    Пользователь должен иметь возможность создать игру с конкретным пользователем
  prerequisites:
    Пользователь авторизован и открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем тип соперника - из существующих пользователей (друзей)
    - выбираем пользователя из списка
    - выбираем продолжительность времени
    - выбираем тип задания
    - нажимаем кнопку создания игры
  expected-result: |
    Соревнование создано по заданным параметрам с выбранным  пользователем

- summary: |
    Проверка выбора любого соперника из пользователей
  requirement: |
    Пользователь должен иметь возможность создать игру со случайным пользователем
  prerequisites:
    Пользователь авторизован и открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем тип соперника - с другим пользователем
    - выбираем продолжительность времени
    - выбираем тип задания
    - нажимаем кнопку создания игры
  expected-result: |
    Соревнование создано по заданным параметрам со случайным пользователем

- summary: |
    Проверка создания игры с ботом
  requirement: |
    Пользователь должен иметь возможность создать игру с ботом
  prerequisites:
    Пользователь авторизован и открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем тип соперника - бот
    - выбираем продолжительность времени
    - выбираем тип задания
    - нажимаем кнопку создания игры
  expected-result: |
    Соревнование создано по заданным параметрам с ботом

- summary: |
    Проверка работы редактора кода в соревновании
  requirement: |
    На странице игры должен быть реализован встроенный редактор кода
  prerequisites:
    Пользователь авторизован и открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем тип соперника - бот
    - нажимаем кнопку создания игры
    - в открывшейся игре в окне редактора вводим любую строку
  expected-result: |
    На странице игры окно редактора активно

- summary: |
    Проверка работы чата в игре
  requirement: |
    В режиме игры должен быть реализован чат  для участников соревнования
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутствуют
  steps:
    - в открывшейся игре в окне чата вводим текст
    - нажимаем отправить
  expected-result: |
    В чате отображается отправленное собщение с указанием пользователя

- summary: |
    Проверка автопроверок решения в игре
  requirement: |
    Должна быть реализована автоматическая проверка решения участника игры
  prerequisites:
    Пользователь авторизован, запущена игра по задаче по поиску площади прямоугольника, выбран язык NodeJS
  test-data: |
    "const _ = require("lodash");
      const R = require("rambda");
      const solution = (width, length) => {
      return width * length; };
      module.exports = solution;"
  steps:
    - в открывшейся игре в окне редактора вводим данные решения
    - нажимаем проверить решение
  expected-result: |
    Код автоматически проверен и выводится результат проверки

- summary: |
    Проверка запуска матч-реванша с тем же пользователем
  requirement: |
    Пользователь должен иметь возможность переиграть задание при проигрыше
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутвует
  steps:
    - в открывшейся игре нажимаем сдаться
    - нажимаем кнопку периграть (rematch)
  expected-result: |
    Запускается новая игра с тем же соперником

- summary: |
    Проверка очистки редактора кода
  requirement: |
    Пользователь должен иметь возможность очистить редактор кода при ошибках
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутвует
  steps:
    - в открывшейся игре нажимаем набираем текст в редакторе кода
    - нажимаем кнопку очистки редактора
  expected-result: |
    Редактор кода возращается к исходным данным задания

- summary: |
    Проверка сохранения игры при сбое подключения
  requirement: |
    Если вдруг один из игроков вылетел из игры, второй может продолжать играть, вылетевший может переподключиться в игру
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутвует
  steps:
    - закрываем окно с запущенной игрой
    - открываем в новой вкладке личный кабинет игрока
    - в списке игр выбираем покитнутую ранее игру, нажав кнопку продолжения
  expected-result: |
    Игрок возвращается в игру, из которой был выброшен ранее и может продолжать дальше игру

- summary: |
    Проверка объявления о выигрыше
  requirement: |
    Когда один из игроков находит верное решение, обоим игрокам высвечивается модальное окно с победителем этой игры
  prerequisites:
    Пользователь авторизован, запущена игра по задаче по поиску площади прямоугольника, выбран язык NodeJS
  test-data: |
    "const _ = require("lodash");
      const R = require("rambda");
      const solution = (width, length) => {
      return width * length; };
      module.exports = solution;"
  steps:
    - в открывшейся игре в окне редактора вводим данные решения
    - нажимаем проверить решение
  expected-result: |
    Появляется окно с сообщением о выигрыше

- summary: |
    Проверка выхода из игры при выигрыше
  requirement: |
    Победитель-игрок может выйти из игры по нажатию кнопки "exit", которая у него появляется
  prerequisites:
    Пользователь авторизован, запущена игра по задаче по поиску площади прямоугольника, выбран язык NodeJS
  test-data: |
    "const _ = require("lodash");
      const R = require("rambda");
      const solution = (width, length) => {
      return width * length; };
      module.exports = solution;"
  steps:
    - в открывшейся игре в окне редактора вводим данные решения
    - нажимаем проверить решение
    - нажимаем на кнопку выхода
  expected-result: |
    Пользователь выходит из игры
     
- summary: |
    Проверка доигрывания при проигрыше
  requirement: |
    Проигравший игрок должен иметь возможность доиграть при проигрыше
  prerequisites:
    запущена игра по задаче по поиску площади прямоугольника, выбран язык NodeJS
  test-data: |
   "const _ = require("lodash");
      const R = require("rambda");
      const solution = (width, length) => {
      return width * length; };
      module.exports = solution;"
  steps:
    - ожидаем, когда бот выиграет
    - вводим текст в редактор
    - запускаем проверку решения
  expected-result: |
    Сайт позволяет ввести решение и проверить его

- summary: |
    Проверка работы чата в личном кабинете
  requirement: |
    В личном кабинете должен быть реализован чат для общения со всеми пользователями
  prerequisites:
    Пользователь авторизован, открыт личный кабинет
  test-data: |
    отсутствуют
  steps:
    - в открывшейся игре в окне чата вводим текст
    - нажимаем отправить
  expected-result: |
    В чате отображается отправленное собщение с указанием пользователя

- summary: |
    Проверка мобильной верстки сайта
  requirement: |
    Сайт должен иметь мобильную версию
  prerequisites: |
    Отсутствуют
  test-data: |
    Мобильное устройство, например Iphone 11 Pro
  steps:
    - открываем Devtools
    - выбираем режим адаптивности
    - выбираем мобильное устройство для проверки отображения
  expected-result: |
    основные элементы сайта отображаются и адаптированы под устройство

- summary: |
    Проверка работы на планшете
  requirement: |
    Сайт должен быть доступен на различных устройствах, в т.ч. планшете
  prerequisites: |
    Отсутствуют
  test-data: |
    Планшет, например на Ipad Pro 11 inch
  steps:
    - открываем Devtools
    - выбираем режим адаптивности
    - выбираем планшет для проверки отображения
  expected-result: |
    основные элементы сайта отображаются и адаптированы под устройство

- summary: |
    Проверка работы в браузере Google Chrome
  requirement: |
    Сайт должен быть доступен в браузере Google Chrome
  prerequisites: |
    спользование устройства с браузером Google Chrome
  test-data: |
    Тестирование на работу в Google Chrome
  steps:
    - открываем страницу через браузер Google Chrome
    - нажимаем на любую ссылку
  expected-result: |
    основные элементы сайта отображаются и активны

- summary: |
    Проверка работы в браузере Safari
  requirement: |
    Сайт должен быть доступен в браузере Safari
  prerequisites: |
    Использование устройства с браузером Safari
  test-data: |
    Тестирование на работу в Safari
  steps:
    - открываем страницу через браузер Safari
    - нажимаем на любую ссылку
  expected-result: |
    основные элементы сайта отображаются и активны

- summary: |
    Проверка работы в браузере EI 11
  requirement: |
    Сайт должен быть доступен в браузере EI 11 (последняя версия)
  prerequisites: |
    Использование устройства с браузером EI 11 (последняя версия)
  test-data: |
    Тестирование на работу в EI 11 (последняя версия)
  steps:
    - открываем страницу через браузер EI 11
    - нажимаем на любую ссылку
  expected-result: |
    основные элементы сайта отображаются и активны

- summary: |
    Проверка работы в браузере Firefox
  requirement: |
    Сайт должен быть доступен в браузере Firefox (последняя версия)
  prerequisites: |
    Использование устройства с браузером Firefox (последняя версия)
  test-data: |
    Тестирование на работу в Firefox (последняя версия)
  steps:
    - открываем страницу через браузер Firefox
    - нажимаем на любую ссылку
  expected-result: |
    основные элементы сайта отображаются и активны

- summary: |
    Отображение кода соперника в реальном времени
  requirement: |
    Каждый игрок должен видеть код своего соперника в режиме он-лайн
  prerequisites: |
    Пользователь авторизован, запущена игра
  test-data: |
    отсутствует
  steps:
    - начинаем печатать решение в окне редактора
    - ожидаем дейтствия соперника
    - нажимаем на любую ссылку
  expected-result: |
    В окне отображается прогресс решения задачи соперником

- summary: |
   Смена языка отображения сайта
  requirement: |
   Пользователь должен иметь возможность сменить язык сайта
  prerequisites: |
    Пользователь не авторизован
  test-data: |
    отсутствует
  steps:
    - находим на странице кнопку переключения языка
    - меняем язык
  expected-result: |
    Основыне элементы сайта отображаются на выбранном языке

 - summary: |
   Провекрка выхода из личного кабинета
  requirement: |
   Пользователь должен иметь возможность разлогиниться
  prerequisites: |
    Пользователь авторизован
  test-data: |
    отсутствует
  steps:
    - в личном кабинете нажимаем на аватар пользователя
    - в выпавшем меню выбираем пункт выхода из кличного кабинета
    - меняем язык
  expected-result: |
    Пользователь не авторизован, возвращается на главную страницу
 