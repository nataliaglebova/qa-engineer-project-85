---
- summary: | #1
    Проверка запуска игры без регистрации
  requirement: |
    Пользователь должен иметь возможность начать игру без регистрации и авторизации
  prerequisites: |
    Пользователь не авторизован
  test-data: |
    Отсутствуют
  steps:
    - Нажимаем на кнопку запуска игры на стартовой странице
  expected-result: |
    Игра без регистрации успешно создана

- summary: | #2
    Проверка регистрации по email
  requirement: |
    Пользователь может зарегистрироваться по электронной почте
  prerequisites: |
    Пользователь не авторизован, открыта страница регистрации нового пользователя    
  test-data: |
    Отсутствуют
  steps:
    - Вводим в поле любое значение Nickname
    - Вводим в поле любое валидное значение Email
    - Вводим в поле любое значени значение Password
    - Повторяем пароль в поле Password Confirmation
    - Нажимаем на Submit
  expected-result: |
    Пользователь успешно зарегистрирован

- summary: | #3
    Проверка  повторной регистрации существующего пользователя
  requirement: |
    Пользователь не может зарегистрироваться с существующим именем пользователя
  prerequisites: |
    Пользователь не авторизован, открыта страница регистрации нового пользователя    
  test-data: |
    имя пользователя nata1799
  steps:
    - Вводим в поле значение Nickname существующего пользователя
    - Вводим в поле любое валидное значение Email
    - Вводим в поле любое значение Password
    - Повторяем пароль в поле Password Confirmation
    - Нажимаем на Submit
  expected-result: 
    Пользователь не зарегистрирован


- summary: | #4
    Проверка входа пользователя по email
  requirement: |
    При верном вводе логине (email) и пароля пользователь должен войти в личный кабинет игрока
  prerequisites: |
    - Пользователь с тестируемыми данными должен быть в базе пользователей
    - Открыта страница входа
  test-data: |
    Email = 12345678@gmail.com Password = 123456789
  steps:
    - Вводим логин
    - Вводим пароль
    - Нажимаем кнопку «Войти»
  expected-result: 
    Пользователь успешно авторизован

- summary: | #5
    Проверка авторизации несуществующего пользователя
  requirement: |
    Авторизация незарегистрированного пользователя не должна прохлодить успешно
  prerequisites:
    Открыта страница входа
  test-data: |
    Email = nata7@gmail.com Password = password
  steps:
    - Вводим Email
    - Вводим Password
    - Нажимаем кнопку «Войти»
  expected-result: 
    Польтзователь не авторизован

- summary: | #6
    Проверка авторизации пользователя с указанием неверного пароля
  requirement: |
    При неправильном пароле пользователь не авторизуется
  prerequisites:
    Открыта страница входа
  test-data: |
    Email = 12345678@gmail.com Password = password
  steps:
    - Вводим Email
    - Вводим Password
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь не авторизован и появляется сообщение об ошибке в пароле

- summary: | #7
    Проверка авторизации по аккаунту GitHub
  requirement: |
    Пользователь может авторизоваться на сайте через GitHub
  prerequisites:
    Открыта страница входа
    Имеется авторизованный аккаунт GitHub
  test-data: |
    отсутствует
  steps:
    - Нажимаем "Sing in with GitHub"
    - Вводим логин и пароль на странице
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь авторизован

- summary: | #8
    Проверка авторизации по аккаунту Discord
  requirement: |
    Пользователь может авторизоваться на сайте через Discord
  prerequisites:
    Открыта страница входа
    Имеется авторизованный аккаунт Discord
  test-data: |
    отсутствуют
  steps:
    - Нажимаем "Sing in with Discord"
    - Вводим логин и пароль на странице
    - Нажимаем кнопку «Войти»
  expected-result: |
    Пользователь авторизован

- summary: | #9
    Проверка выбора языка программирования в профиле
  requirement: |
    Пользователь должен иметь возможность выбрать язык, на котором будет проходить игра
  prerequisites:
    Пользователь авторизован 
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на иконку пользователя
    - переходим в настройки ("Settings")
    - выбираем язык игры (Your weapon) "Typescript"
    - сохраняем настройки
  expected-result: |
    Изменения сохранены в профиле

- summary: | #10
    Проверка настройки сложности игры при создании
  requirement: |
    Пользователь должен иметь возможность создать игру по настраиваемым параметрам сложности
  prerequisites:
    Пользователь авторизован
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем навысший уровень сложности (4  звезды)
    - выбираем игру с ботом
    - нажимаем кнопку создания игры
  expected-result: |
    Игра создана с ботом с навысшим уровнем сложности

- summary: | #10.1
    Проверка настройки времени игры при создании
  requirement: |
    Пользователь должен иметь возможность настроить время для решения 
  prerequisites:
    Пользователь авторизован
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем игру с ботом
    - выбираем время игры, отличающееся от установленного по умолчанию, например 10 минут
    - нажимаем кнопку создания игры
  expected-result: |
    Игра создана с выбранной продолжительностью времени для решения

- summary: | #11
    Проверка подключения к уже созданным играм
  requirement: |
    В Личном кабинете пользователь должен иметь возможность присоединиться к уже созданным играм/турнирам
  prerequisites:
    Пользователь авторизован
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на кнопку подключения к существующей игре в режиме ожидания соперника
  expected-result: |
    Игра начинается при присоединении к нему пользователя

- summary: | #12
    Проверка создания приглашения конкретному сопернику в игру
  requirement: |
    Пользователь должен иметь возможность создать игру с конкретным пользователем
  prerequisites:
    Первый пользователь "nata1799" авторизован с данными Email = 12345678@gmail.com Password = 123456789
  test-data: |
    Второй пользователь "nata17990"
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности максимальный (4 звезды)
    - выбираем тип соперника - из существующих пользователей (друзей)
    - печатем в поиск "nata17990"
    - выбираем продолжительность времени 10 минут
    - нажимаем кнопку создания приглашения
  expected-result: |
    Создано приглашение в игру по заданным параметрам  выбранному  пользователю

- summary: | #12.1
    Проверка запуска игры по приглашению соперника
  requirement: |
    Пользователь должен иметь возможность присоедениться к игре по направленному приглашению
  prerequisites:
    Первый пользователь "nata1799" с данными Email = 12345678@gmail.com Password = 123456789  создал приглашение в игру
    Второй пользователь "nata17990" авторизован с данными Email = 123456789@gmail.com Password = 123456789
  test-data: |
    отсутвуют
  steps:
    - Нажимаем на иконку игр с соперниками рядом с иконкой пользователя (с уведомлением о входящем приглашении) 
    - принимаем приглашение к игре
  expected-result: |
    Начинается игра с пригласившим пользователем

- summary: | #13
    Проверка создания игры с любым соперником из пользователей
  requirement: |
    Пользователь должен иметь возможность создать игру для со случайным пользователем
  prerequisites:
    Пользователь авторизован 
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем тип соперника - с другим пользователем
    - выбираем продолжительность времени
    - выбираем тип задания
    - нажимаем кнопку создания игры
  expected-result: |
    Игра объявлена, отображается в лобби и ожидает подключения любого соперника

- summary: | # 14
    Проверка создания игры с ботом
  requirement: |
    Пользователь должен иметь возможность создать игру с ботом
  prerequisites:
    Пользователь авторизован 
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем тип соперника - бот
    - выбираем продолжительность времени
    - выбираем тип задания
    - нажимаем кнопку создания игры
  expected-result: |
    Игра создана по заданным параметрам с ботом

- summary: | # 15
    Проверка работы редактора кода в игре
  requirement: |
    На странице игры должен быть реализован встроенный редактор кода
  prerequisites:
    Пользователь авторизован 
  test-data: |
    отсутствуют
  steps:
    - Нажимаем на создание игры 
    - выбираем уровень сложности
    - выбираем тип соперника - бот
    - нажимаем кнопку создания игры
    - в открывшейся игре в окне редактора вводим любую строку
  expected-result: |
    Отображается введенное сообщение в редакторе кода

- summary: | # 16
    Проверка работы чата в игре
  requirement: |
    В режиме игры должен быть реализован чат  для участников
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутствуют
  steps:
    - в открывшейся игре в окне чата вводим текст
    - нажимаем отправить
  expected-result: |
    В чате отображается отправленное собщение с указанием пользователя

- summary: | #17
    Проверка победы в игре с ботом
  requirement: |
    Должна быть реализована автоматическая проверка решения участника игры
  prerequisites:
    Пользователь авторизован, запущена игра по задаче по поиску площади прямоугольника, выбран язык NodeJS
  test-data: |
    "const _ = require("lodash");
      const R = require("rambda");
      const solution = (width, length) => {
      return width * length; };
      module.exports = solution;"
  steps:
    - в открывшейся игре в окне редактора вводим данные решения
    - нажимаем проверить решение
  expected-result: |
    Пользователь победил

- summary: | #18
    Проверка запуска матч-реванша с тем же пользователем
  requirement: |
    Пользователь должен иметь возможность переиграть задание при проигрыше
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутвует
  steps:
    - в открывшейся игре нажимаем сдаться
    - нажимаем кнопку периграть (rematch)
  expected-result: |
    Запускается новая игра с тем же соперником

- summary: | #19
    Проверка очистки редактора кода
  requirement: |
    Пользователь должен иметь возможность очистить редактор кода при ошибках
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутвует
  steps:
    - в открывшейся игре нажимаем набираем текст в редакторе кода
    - нажимаем кнопку очистки редактора
  expected-result: |
    Редактор кода возращается к исходным данным задания

- summary: | #20
    Проверка сохранения игры при сбое подключения
  requirement: |
    Если вдруг один из игроков вылетел из игры, второй может продолжать играть, вылетевший может переподключиться в игру
  prerequisites:
    Пользователь авторизован, запущена игра
  test-data: |
    отсутвует
  steps:
    - закрываем окно с запущенной игрой
    - открываем в новой вкладке личный кабинет игрока
    - в списке игр выбираем покинутую ранее игру, нажав кнопку продолжения
  expected-result: |
    Игрок возвращается в игру, из которой был выброшен ранее и может продолжать дальше игру
 
- summary: | #23
    Проверка ввода кода в редактор после проигрыша в игре
  requirement: |
    Проигравший игрок должен иметь возможность вводить код для решения задания при проигрыше
  prerequisites:
    запущена игра по задаче по поиску площади прямоугольника, выбран язык NodeJS
  test-data: |
   "const _ = require("lodash");
      const R = require("rambda");
      const solution = (width, length) => {
      return width * length; };
      module.exports = solution;"
  steps:
    - ожидаем, когда бот выиграет
    - вводим текст в редактор
    - запускаем проверку решения
  expected-result: |
    Сайт позволяет ввести решение и проверить его

- summary: | #24
    Проверка работы чата в лобби
  requirement: |
    На сартовой странице авторизованного пользователя должен быть реализован чат для общения со всеми пользователями
  prerequisites:
    Пользователь авторизован
  test-data: |
    отсутствуют
  steps:
    - в окне чата вводим текст
    - нажимаем отправить
  expected-result: |
    В чате отображается отправленное собщение с указанием пользователя

- summary: | #25
    Проверка мобильной верстки сайта
  requirement: |
    Сайт должен иметь мобильную версию
  prerequisites: |
    Отсутствуют
  test-data: |
    Мобильное устройство, например Iphone 11 Pro
  steps:
    - открываем Devtools
    - выбираем режим адаптивности
    - выбираем мобильное устройство для проверки отображения
  expected-result: |
    основные элементы сайта отображаются и адаптированы под устройство

- summary: | #26
    Проверка работы на планшете
  requirement: |
    Сайт должен быть доступен на различных устройствах, в т.ч. планшете
  prerequisites: |
    Отсутствуют
  test-data: |
    Планшет, например на Ipad Pro 11 inch
  steps:
    - открываем Devtools
    - выбираем режим адаптивности
    - выбираем планшет для проверки отображения
  expected-result: |
    основные элементы сайта отображаются и адаптированы под устройство

- summary: | #27
    Проверка работы в браузере Google Chrome
  requirement: |
    Сайт должен быть доступен в браузере Google Chrome
  prerequisites: |
    спользование устройства с браузером Google Chrome
  test-data: |
    Тестирование на работу в Google Chrome
  steps:
    - открываем страницу через браузер Google Chrome
    - нажимаем на любую ссылку
  expected-result: |
    основные элементы сайта отображаются и активны

- summary: | #28
    Проверка работы в браузере Safari
  requirement: |
    Сайт должен быть доступен в браузере Safari
  prerequisites: |
    Использование устройства с браузером Safari
  test-data: |
    Тестирование на работу в Safari
  steps:
    - открываем страницу через браузер Safari
    - нажимаем на любую ссылку
  expected-result: |
    основные элементы сайта отображаются и активны

- summary: | #30
    Проверка работы в браузере Firefox
  requirement: |
    Сайт должен быть доступен в браузере Firefox (последняя версия)
  prerequisites: |
    Использование устройства с браузером Firefox (последняя версия)
  test-data: |
    Тестирование на работу в Firefox (последняя версия)
  steps:
    - открываем страницу через браузер Firefox
    - нажимаем на любую ссылку
  expected-result: |
    основные элементы сайта отображаются и активны

- summary: | #31
    Отображение кода соперника в реальном времени
  requirement: |
    Каждый игрок должен видеть код своего соперника в режиме он-лайн
  prerequisites: |
    Пользователь авторизован, запущена игра
  test-data: |
    отсутствует
  steps:
    - начинаем печатать решение в окне редактора
    - ожидаем дейтствия соперника
    - нажимаем на любую ссылку
  expected-result: |
    В окне отображается прогресс решения задачи соперником

- summary: | #32
   Смена языка отображения сайта
  requirement: |
   Пользователь должен иметь возможность сменить язык сайта
  prerequisites: |
    Пользователь не авторизован
  test-data: |
    отсутствует
  steps:
    - находим на странице кнопку переключения языка
    - меняем язык
  expected-result: |
    Основыне элементы сайта отображаются на выбранном языке

- summary: | #33
   Провекрка выхода из личного кабинета
  requirement: |
   Пользователь должен иметь возможность разлогиниться
  prerequisites: |
    Пользователь авторизован
  test-data: |
    отсутствует
  steps:
    - в личном кабинете нажимаем на аватар пользователя
    - в выпавшем меню выбираем пункт выхода из кличного кабинета
    - меняем язык
  expected-result: |
    Пользователь не авторизован, возвращается на главную страницу

- summary: | #34
    Проверка привязки  аккаута GitHub после регистрации
  requirement: |
    В личном кабинете должна иметься возможность привязать аккаунт GitHub
  prerequisites:
    Открыты настроки аккаунта в личном кабинете
    Имеется авторизованный аккаунт GitHub
  test-data: |
    отсутствуют
  steps:
    - Нажимаем ссылку для привязки аккаунта GitHub
  expected-result: |
    В личном кабинете появляется привязка к аккаунту GitHub

- summary: | #35
    Проверка сохранения настройки звуковых эффектов в личном кабинете
  requirement: |
    В личном кабинете должна иметься возможность выбрать звуковой эффект
  prerequisites:
    Открыты настроки аккаунта в личном кабинете
  test-data: |
    отсутствуют
  steps:
    - Нажимаем выбор звукового эффекта
    - Изменяем громкость эффектов
  expected-result: |
    Изменения в виде и громкости звуковых эффектов сохраняется

- summary: | #35
    Проверка сохранения настройки громокости звуковых эффектов в личном кабинете
  requirement: |
    В личном кабинете должна иметься возможность выбрать громкость звукового эффекта
  prerequisites:
    Открыты настроки аккаунта в личном кабинете
  test-data: |
    отсутствуют
  steps:
    - Нажимаем выбор звукового эффекта
    - Изменяем громкость эффектов
  expected-result: |
    Изменения громкости звуковых эффектов сохраняется и отображается при обновлении страницы

- summary: | #35
    Проверка смены пароля при активной сессии
  requirement: |
    При смене пароля все ранее активные сессии завершаются, нужно перезайти в аккаунт 
  prerequisites:
    Пользователь авторизован
  test-data: |
    отсутствуют
  steps:
    - переходим на страницу смены пароля по ссылке https://codebattle.hexlet.io/remind_password
    - Запрашиваем смену пароля
    - выполняем необходимые действия из письма для смены пароля
  expected-result: |
    Пароль сменен, активные сессии завершаются, для продолжения работы нужно зайти в аккаунт с новыми данными
